// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Google implementation.
 */
public class GCMSettings
{
	private final IMendixObject gCMSettingsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "PushNotifications.GCMSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		XMPPServer("XMPPServer"),
		XMPPPort("XMPPPort"),
		SenderId("SenderId"),
		APIKey("APIKey");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public GCMSettings(IContext context)
	{
		this(context, Core.instantiate(context, "PushNotifications.GCMSettings"));
	}

	protected GCMSettings(IContext context, IMendixObject gCMSettingsMendixObject)
	{
		if (gCMSettingsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("PushNotifications.GCMSettings", gCMSettingsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a PushNotifications.GCMSettings");

		this.gCMSettingsMendixObject = gCMSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'GCMSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static pushnotifications.proxies.GCMSettings initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return pushnotifications.proxies.GCMSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static pushnotifications.proxies.GCMSettings initialize(IContext context, IMendixObject mendixObject)
	{
		return new pushnotifications.proxies.GCMSettings(context, mendixObject);
	}

	public static pushnotifications.proxies.GCMSettings load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return pushnotifications.proxies.GCMSettings.initialize(context, mendixObject);
	}

	public static java.util.List<pushnotifications.proxies.GCMSettings> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<pushnotifications.proxies.GCMSettings> result = new java.util.ArrayList<pushnotifications.proxies.GCMSettings>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//PushNotifications.GCMSettings" + xpathConstraint))
			result.add(pushnotifications.proxies.GCMSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final Boolean getEnabled(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(IContext context, Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of XMPPServer
	 */
	public final String getXMPPServer()
	{
		return getXMPPServer(getContext());
	}

	/**
	 * @param context
	 * @return value of XMPPServer
	 */
	public final String getXMPPServer(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.XMPPServer.toString());
	}

	/**
	 * Set value of XMPPServer
	 * @param xmppserver
	 */
	public final void setXMPPServer(String xmppserver)
	{
		setXMPPServer(getContext(), xmppserver);
	}

	/**
	 * Set value of XMPPServer
	 * @param context
	 * @param xmppserver
	 */
	public final void setXMPPServer(IContext context, String xmppserver)
	{
		getMendixObject().setValue(context, MemberNames.XMPPServer.toString(), xmppserver);
	}

	/**
	 * @return value of XMPPPort
	 */
	public final Integer getXMPPPort()
	{
		return getXMPPPort(getContext());
	}

	/**
	 * @param context
	 * @return value of XMPPPort
	 */
	public final Integer getXMPPPort(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.XMPPPort.toString());
	}

	/**
	 * Set value of XMPPPort
	 * @param xmppport
	 */
	public final void setXMPPPort(Integer xmppport)
	{
		setXMPPPort(getContext(), xmppport);
	}

	/**
	 * Set value of XMPPPort
	 * @param context
	 * @param xmppport
	 */
	public final void setXMPPPort(IContext context, Integer xmppport)
	{
		getMendixObject().setValue(context, MemberNames.XMPPPort.toString(), xmppport);
	}

	/**
	 * @return value of SenderId
	 */
	public final Long getSenderId()
	{
		return getSenderId(getContext());
	}

	/**
	 * @param context
	 * @return value of SenderId
	 */
	public final Long getSenderId(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.SenderId.toString());
	}

	/**
	 * Set value of SenderId
	 * @param senderid
	 */
	public final void setSenderId(Long senderid)
	{
		setSenderId(getContext(), senderid);
	}

	/**
	 * Set value of SenderId
	 * @param context
	 * @param senderid
	 */
	public final void setSenderId(IContext context, Long senderid)
	{
		getMendixObject().setValue(context, MemberNames.SenderId.toString(), senderid);
	}

	/**
	 * @return value of APIKey
	 */
	public final String getAPIKey()
	{
		return getAPIKey(getContext());
	}

	/**
	 * @param context
	 * @return value of APIKey
	 */
	public final String getAPIKey(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.APIKey.toString());
	}

	/**
	 * Set value of APIKey
	 * @param apikey
	 */
	public final void setAPIKey(String apikey)
	{
		setAPIKey(getContext(), apikey);
	}

	/**
	 * Set value of APIKey
	 * @param context
	 * @param apikey
	 */
	public final void setAPIKey(IContext context, String apikey)
	{
		getMendixObject().setValue(context, MemberNames.APIKey.toString(), apikey);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return gCMSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final pushnotifications.proxies.GCMSettings that = (pushnotifications.proxies.GCMSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "PushNotifications.GCMSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
