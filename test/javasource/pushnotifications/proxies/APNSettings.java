// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package pushnotifications.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class APNSettings
{
	private final IMendixObject aPNSettingsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "PushNotifications.APNSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		Server("Server"),
		Port("Port"),
		FeedbackServer("FeedbackServer"),
		FeedbackPort("FeedbackPort"),
		APNSettings_APNCertificate("PushNotifications.APNSettings_APNCertificate");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public APNSettings(IContext context)
	{
		this(context, Core.instantiate(context, "PushNotifications.APNSettings"));
	}

	protected APNSettings(IContext context, IMendixObject aPNSettingsMendixObject)
	{
		if (aPNSettingsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("PushNotifications.APNSettings", aPNSettingsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a PushNotifications.APNSettings");

		this.aPNSettingsMendixObject = aPNSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'APNSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static pushnotifications.proxies.APNSettings initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return pushnotifications.proxies.APNSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static pushnotifications.proxies.APNSettings initialize(IContext context, IMendixObject mendixObject)
	{
		return new pushnotifications.proxies.APNSettings(context, mendixObject);
	}

	public static pushnotifications.proxies.APNSettings load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return pushnotifications.proxies.APNSettings.initialize(context, mendixObject);
	}

	public static java.util.List<pushnotifications.proxies.APNSettings> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<pushnotifications.proxies.APNSettings> result = new java.util.ArrayList<pushnotifications.proxies.APNSettings>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//PushNotifications.APNSettings" + xpathConstraint))
			result.add(pushnotifications.proxies.APNSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final Boolean getEnabled(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(IContext context, Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of Server
	 */
	public final String getServer()
	{
		return getServer(getContext());
	}

	/**
	 * @param context
	 * @return value of Server
	 */
	public final String getServer(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Server.toString());
	}

	/**
	 * Set value of Server
	 * @param server
	 */
	public final void setServer(String server)
	{
		setServer(getContext(), server);
	}

	/**
	 * Set value of Server
	 * @param context
	 * @param server
	 */
	public final void setServer(IContext context, String server)
	{
		getMendixObject().setValue(context, MemberNames.Server.toString(), server);
	}

	/**
	 * @return value of Port
	 */
	public final Integer getPort()
	{
		return getPort(getContext());
	}

	/**
	 * @param context
	 * @return value of Port
	 */
	public final Integer getPort(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.Port.toString());
	}

	/**
	 * Set value of Port
	 * @param port
	 */
	public final void setPort(Integer port)
	{
		setPort(getContext(), port);
	}

	/**
	 * Set value of Port
	 * @param context
	 * @param port
	 */
	public final void setPort(IContext context, Integer port)
	{
		getMendixObject().setValue(context, MemberNames.Port.toString(), port);
	}

	/**
	 * @return value of FeedbackServer
	 */
	public final String getFeedbackServer()
	{
		return getFeedbackServer(getContext());
	}

	/**
	 * @param context
	 * @return value of FeedbackServer
	 */
	public final String getFeedbackServer(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.FeedbackServer.toString());
	}

	/**
	 * Set value of FeedbackServer
	 * @param feedbackserver
	 */
	public final void setFeedbackServer(String feedbackserver)
	{
		setFeedbackServer(getContext(), feedbackserver);
	}

	/**
	 * Set value of FeedbackServer
	 * @param context
	 * @param feedbackserver
	 */
	public final void setFeedbackServer(IContext context, String feedbackserver)
	{
		getMendixObject().setValue(context, MemberNames.FeedbackServer.toString(), feedbackserver);
	}

	/**
	 * @return value of FeedbackPort
	 */
	public final Integer getFeedbackPort()
	{
		return getFeedbackPort(getContext());
	}

	/**
	 * @param context
	 * @return value of FeedbackPort
	 */
	public final Integer getFeedbackPort(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.FeedbackPort.toString());
	}

	/**
	 * Set value of FeedbackPort
	 * @param feedbackport
	 */
	public final void setFeedbackPort(Integer feedbackport)
	{
		setFeedbackPort(getContext(), feedbackport);
	}

	/**
	 * Set value of FeedbackPort
	 * @param context
	 * @param feedbackport
	 */
	public final void setFeedbackPort(IContext context, Integer feedbackport)
	{
		getMendixObject().setValue(context, MemberNames.FeedbackPort.toString(), feedbackport);
	}

	/**
	 * @return value of APNSettings_APNCertificate
	 */
	public final pushnotifications.proxies.APNCertificate getAPNSettings_APNCertificate() throws CoreException
	{
		return getAPNSettings_APNCertificate(getContext());
	}

	/**
	 * @param context
	 * @return value of APNSettings_APNCertificate
	 */
	public final pushnotifications.proxies.APNCertificate getAPNSettings_APNCertificate(IContext context) throws CoreException
	{
		pushnotifications.proxies.APNCertificate result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.APNSettings_APNCertificate.toString());
		if (identifier != null)
			result = pushnotifications.proxies.APNCertificate.load(context, identifier);
		return result;
	}

	/**
	 * Set value of APNSettings_APNCertificate
	 * @param apnsettings_apncertificate
	 */
	public final void setAPNSettings_APNCertificate(pushnotifications.proxies.APNCertificate apnsettings_apncertificate)
	{
		setAPNSettings_APNCertificate(getContext(), apnsettings_apncertificate);
	}

	/**
	 * Set value of APNSettings_APNCertificate
	 * @param context
	 * @param apnsettings_apncertificate
	 */
	public final void setAPNSettings_APNCertificate(IContext context, pushnotifications.proxies.APNCertificate apnsettings_apncertificate)
	{
		if (apnsettings_apncertificate == null)
			getMendixObject().setValue(context, MemberNames.APNSettings_APNCertificate.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.APNSettings_APNCertificate.toString(), apnsettings_apncertificate.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return aPNSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final pushnotifications.proxies.APNSettings that = (pushnotifications.proxies.APNSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "PushNotifications.APNSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
